[{"path":"http://corymccartan.com/easycensus/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Cory McCartan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://corymccartan.com/easycensus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cory McCartan. Author, maintainer.","code":""},{"path":"http://corymccartan.com/easycensus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McCartan C (2023). easycensus: Quickly Find, Extract, Marginalize U.S. Census Tables. https://corymccartan.com/easycensus/, https://github.com/CoryMcCartan/easycensus/, http://corymccartan.com/easycensus/.","code":"@Manual{,   title = {easycensus: Quickly Find, Extract, and Marginalize U.S. Census Tables},   author = {Cory McCartan},   year = {2023},   note = {https://corymccartan.com/easycensus/, https://github.com/CoryMcCartan/easycensus/, http://corymccartan.com/easycensus/}, }"},{"path":"http://corymccartan.com/easycensus/index.html","id":"easycensus-","dir":"","previous_headings":"","what":"Quickly Find, Extract, and Marginalize U.S. Census Tables","title":"Quickly Find, Extract, and Marginalize U.S. Census Tables","text":"Extracting desired data using proper Census variable names can time-consuming. package takes pain process. use case best illustrated example. Suppose want age--race information tract level. Unfortunately, Census Bureau doesn’t publish specific age--race table. build one public-use microdata, lacks tract-level geographic information, privacy reasons. left trying find existing Census product can extract age--race information . Unless ’re Census pro, won’t know exactly top head. suppose know ’d like get data decennial census, since covers whole nation asks age race. easycensus provides cens_find_dec() function help locate exactly decennial census table use get data want. can see right away best bet either table P12 table PCT12, depending whether want age 5-year groups individual years. Let’s say ’re OK five-year bins. need get data call cens_get_dec(). ’ve gotten labeled data, ’s easy marginalize unneeded sex variable. can either use group_by() summarize() usual, can use cens_margin_to() function easycensus. added advantage automatically handling margins error ACS data. Finally, might want simplify age race labels, since kind verbose. easycensus provides set tidy_*() functions assist . Dive reference learn !","code":"library(easycensus)  cens_find_dec(age, race) #>  #> ── Top 2 matching tables ─────────────────────────────────────────────────────── #>  #>  P12  - SEX BY AGE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age #> • race_ethnicity #> Example values: #> • female / 45 to 49 years / black or african american alone #> • female / 20 years / two or more races #> • male / 55 to 59 years / american indian and alaska native alone #>  #>  PCT12  - SEX BY AGE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age #> • race_ethnicity #> Example values: #> • female / 70 years / total #> • female / 85 years / native hawaiian and other pacific islander alone #> • female / 30 years / two or more races d_cens = cens_get_dec(\"P12\", \"tract\", state=\"AK\", county=\"Nome\") print(d_cens) #> # A tibble: 960 × 7 #>    GEOID       NAME                            varia…¹ value sex   age   race_…² #>    <chr>       <chr>                           <chr>   <dbl> <fct> <fct> <fct>   #>  1 02180000100 Census Tract 1, Nome Census Ar… P012002  3053 male  total total   #>  2 02180000100 Census Tract 1, Nome Census Ar… P012003   359 male  unde… total   #>  3 02180000100 Census Tract 1, Nome Census Ar… P012004   318 male  5 to… total   #>  4 02180000100 Census Tract 1, Nome Census Ar… P012005   294 male  10 t… total   #>  5 02180000100 Census Tract 1, Nome Census Ar… P012006   165 male  15 t… total   #>  6 02180000100 Census Tract 1, Nome Census Ar… P012007   130 male  18 a… total   #>  7 02180000100 Census Tract 1, Nome Census Ar… P012008    53 male  20 y… total   #>  8 02180000100 Census Tract 1, Nome Census Ar… P012009    47 male  21 y… total   #>  9 02180000100 Census Tract 1, Nome Census Ar… P012010   150 male  22 t… total   #> 10 02180000100 Census Tract 1, Nome Census Ar… P012011   204 male  25 t… total   #> # … with 950 more rows, and abbreviated variable names ¹​variable, #> #   ²​race_ethnicity #> # ℹ Use `print(n = ...)` to see more rows library(dplyr)  d_cens = d_cens %>%     # Drop table margins. Can also use `drop_total=TRUE` in `get_dec_table()`     filter(age != \"total\", race_ethnicity != \"total\") %>%     cens_margin_to(age, race=race_ethnicity) print(d_cens) #> # A tibble: 414 × 5 #>    GEOID       NAME                                     age          race  value #>    <chr>       <chr>                                    <fct>        <fct> <dbl> #>  1 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… amer…   524 #>  2 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… asia…     1 #>  3 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… blac…     1 #>  4 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… hisp…     3 #>  5 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… nati…     0 #>  6 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… some…     0 #>  7 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… two …    23 #>  8 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… whit…    11 #>  9 02180000100 Census Tract 1, Nome Census Area, Alaska 10 to 14 ye… whit…    10 #> 10 02180000100 Census Tract 1, Nome Census Area, Alaska 15 to 17 ye… amer…   293 #> # … with 404 more rows d_cens %>%     mutate(race = tidy_race(race),            tidy_age_bins(age)) #> # A tibble: 414 × 7 #>    GEOID       NAME                             age   race  value age_f…¹ age_to #>    <chr>       <chr>                            <fct> <fct> <dbl>   <dbl>  <dbl> #>  1 02180000100 Census Tract 1, Nome Census Are… 10 t… aian    524      10     14 #>  2 02180000100 Census Tract 1, Nome Census Are… 10 t… asian     1      10     14 #>  3 02180000100 Census Tract 1, Nome Census Are… 10 t… black     1      10     14 #>  4 02180000100 Census Tract 1, Nome Census Are… 10 t… hisp      3      10     14 #>  5 02180000100 Census Tract 1, Nome Census Are… 10 t… nhpi      0      10     14 #>  6 02180000100 Census Tract 1, Nome Census Are… 10 t… other     0      10     14 #>  7 02180000100 Census Tract 1, Nome Census Are… 10 t… two      23      10     14 #>  8 02180000100 Census Tract 1, Nome Census Are… 10 t… white    11      10     14 #>  9 02180000100 Census Tract 1, Nome Census Are… 10 t… whit…    10      10     14 #> 10 02180000100 Census Tract 1, Nome Census Are… 15 t… aian    293      15     17 #> # … with 404 more rows, and abbreviated variable name ¹​age_from"},{"path":"http://corymccartan.com/easycensus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quickly Find, Extract, and Marginalize U.S. Census Tables","text":"can install released version easycensus CRAN : install development version GitHub :","code":"install.packages(\"easycensus\") # install.packages(\"devtools\") devtools::install_github(\"CoryMcCartan/easycensus\")"},{"path":"http://corymccartan.com/easycensus/reference/cens_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorize use of the Census API — cens_auth","title":"Authorize use of the Census API — cens_auth","text":"Tries environment variables CENSUS_API_KEY CENSUS_KEY, order. none found R used interactive mode, prompt user key.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorize use of the Census API — cens_auth","text":"","code":"cens_auth()"},{"path":"http://corymccartan.com/easycensus/reference/cens_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authorize use of the Census API — cens_auth","text":"Census API key","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_find.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a decennial or ACS census table with variables of interest — cens_find","title":"Find a decennial or ACS census table with variables of interest — cens_find","text":"function uses fuzzy matching help identify tables census contain variables interest. Matched table codes printed , along Census-provided table description, parsed variable names, example table cells. website https://censusreporter.org/ may also useful finding variables.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a decennial or ACS census table with variables of interest — cens_find","text":"","code":"cens_find(tables, ..., show = 4)  cens_find_dec(..., show = 2)  cens_find_acs(..., show = 4)"},{"path":"http://corymccartan.com/easycensus/reference/cens_find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a decennial or ACS census table with variables of interest — cens_find","text":"tables list cens_table objects, produced cens_parse_tables(). ... Variables look . can length-1 character vectors, , convenience, can left unquoted (see examples). show many matching tables show. Increase show possible matches, cost output. Negative values converted positive suppress printing.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_find.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a decennial or ACS census table with variables of interest — cens_find","text":"codes top show tables, invisibly show positive.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_find.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a decennial or ACS census table with variables of interest — cens_find","text":"","code":"cens_find_dec(\"sex\", \"age\") #>  #> ── Top 2 matching tables ─────────────────────────────────────────────────────── #>  #>  P12  - SEX BY AGE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age #> • race_ethnicity #> Example values: #> • female / 25 to 29 years / american indian and alaska native alone #> • male / 10 to 14 years / american indian and alaska native alone #> • male / 75 to 79 years / black or african american alone #>  #>  PCT12  - SEX BY AGE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age #> • race_ethnicity #> Example values: #> • female / 20 years / black or african american alone #> • female / 84 years / native hawaiian and other pacific islander alone #> • female / 4 years / total cens_find(tables_sf1, \"sex\", \"age\") # same as above #>  #> ── Top 4 matching tables ─────────────────────────────────────────────────────── #>  #>  P12  - SEX BY AGE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age #> • race_ethnicity #> Example values: #> • male / 20 years / native hawaiian and other pacific islander alone #> • male / 65 and 66 years / asian alone #> • female / 45 to 49 years / total #>  #>  PCT12  - SEX BY AGE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age #> • race_ethnicity #> Example values: #> • female / 68 years / white alone #> • female / 87 years / asian alone #> • male / 33 years / two or more races, not hispanic or latino #>  #>  PCO1  - GROUP QUARTERS POPULATION BY SEX BY AGE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age #> Example values: #> • male / 10 to 14 years #> • female / 40 to 44 years #> • male / 35 to 39 years #>  #>  P14  - SEX BY AGE FOR THE POPULATION UNDER 20 YEARS #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • sex #> • age_for_the_population_under_20_years #> Example values: #> • male / 8 years #> • female / 14 years #> • male / 1 year cens_find_dec(tenure, race) #>  #> ── Top 2 matching tables ─────────────────────────────────────────────────────── #>  #>  H14  - TENURE BY RACE OF HOUSEHOLDER #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • tenure #> • race_of_householder #> Example values: #> • owner occupied / householder who is black or african american alone #> • owner occupied / householder who is some other race alone #> • owner occupied / householder who is asian alone #>  #>  H16  - TENURE BY HOUSEHOLD SIZE #> Surveys / Files: #> ✔ Decennial / Summary File 1 #> Parsed variables: #> • tenure #> • household_size #> • race_ethnicity #> Example values: #> • owner occupied / 4-person household / native hawaiian and other pacific #> islander alone householder #> • renter occupied / 3-person household / some other race alone householder #> • renter occupied / 4-person household / some other race alone householder cens_find_acs(\"income\", \"sex\", show=3) #>  #> ── Top 3 matching tables ─────────────────────────────────────────────────────── #>  #>  B17008  - AGGREGATE INCOME DEFICIT (DOLLARS) IN THE PAST 12 MONTHS OF #> UNRELATED INDIVIDUALS BY SEX #> Surveys / Files: #> ✔ ACS / 1-year Detailed #> ✔ ACS / 5-year Detailed #> Parsed variables: #> • sex #> Example values: #> • female (dollars) #> • male (dollars) #> • total #>  #>  B19216  - AGGREGATE NONFAMILY HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2019 #> INFLATION-ADJUSTED DOLLARS) BY SEX OF HOUSEHOLDER BY LIVING ALONE BY AGE OF #> HOUSEHOLDER #> Surveys / Files: #> ✔ ACS / 1-year Detailed #> ✔ ACS / 5-year Detailed #> Parsed variables: #> • sex_of_householder #> • living_alone #> • age_of_householder #> Example values: #> • male householder (dollars) / total / total #> • male householder (dollars) / not living alone (dollars) / householder 15 to #> 64 years (dollars) #> • male householder (dollars) / living alone (dollars) / householder 15 to 64 #> years (dollars) #>  #>  B21004  - MEDIAN INCOME IN THE PAST 12 MONTHS (IN 2019 INFLATION-ADJUSTED #> DOLLARS) BY VETERAN STATUS BY SEX FOR THE CIVILIAN POPULATION 18 YEARS AND OVER #> WITH INCOME #> Surveys / Files: #> ✔ ACS / 1-year Detailed #> ✔ ACS / 5-year Detailed #> Parsed variables: #> • veteran_status #> • sex_for_the_civilian_population_18_years_over_with_income #> Example values: #> • veteran / male #> • total / total #> • nonveteran / female cens_find_acs(\"heath care\", show=-1) #> [1] \"B27009\""},{"path":"http://corymccartan.com/easycensus/reference/cens_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Geography Specification for Census Data — cens_geo","title":"Construct a Geography Specification for Census Data — cens_geo","text":"Currently used mostly internally. Builds Census API-formatted specification geographies download data . State county names (postal abbreviations) partially matched existing tables, ease use. geographies specified Census GEOIDs. usgazeteer package, available remotes::install_github(\"bhaskarvk/usgazetteer\"), may useful finding GEOIDs geographies. Consult \"geography\" sections API https://www.census.gov/data/developers/data-sets.html information geographic specifiers may provided combination others.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Geography Specification for Census Data — cens_geo","text":"","code":"cens_geo(geo = NULL, ..., check = TRUE, api = \"acs/acs5\", year = 2019)"},{"path":"http://corymccartan.com/easycensus/reference/cens_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Geography Specification for Census Data — cens_geo","text":"geo geographic level return. One machine-readable human-readable names listed \"Details\" section. return matching geographies level, filtered arguments ....  example, setting geo=\"tract\" equivalent setting tract=\"\". ... Geographies return, supported Census API. Order matters ---first argument geographic level return (.e., corresponds geo argument) additional arguments filter results. Use \"\", \"*\", NA, TRUE return units particular geography.  See examples details. check TRUE, validate provided geographies available geographies relevant Census API. Requires api year arguments specified. api Census API programmatic name \"acs/acs5\". year year data","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Geography Specification for Census Data — cens_geo","text":"list two elements, region regionin, together specify valid Census API geography argument.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_geo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a Geography Specification for Census Data — cens_geo","text":"Supported geography arguments: us region division state county county_subdiv (County Subdivision) subminor_civil_division (Subminor Civil Division) place_remainder (Place/Remainder (Part)) tract_part (Tract (Part)) urban_rural (Urban Rural) block_group_part (Block Group (Part)) block tract aian_area_part (American Indian Area/Alaska Native Area/Hawaiian Home Land (Part)) block_group (Block Group) county_part (County (Part)) place_part (Place (Part)) place consolidated_city (Consolidated City) alaska_native_regional_corporation (Alaska Native Regional Corporation) aian_area (American Indian Area/Alaska Native Area/Hawaiian Home Land) tribal_subdiv (Tribal Subdivision/Remainder) aian_reserve_stat (American Indian Area/Alaska Native Area (Reservation Statistical Entity )) ai_tribal_subdiv_part (American Indian Tribal Subdivision (Part)) ai_off_reserve_trust (American Indian Area (-Reservation Trust Land )/Hawaiian Home Land) tribal_census_tract (Tribal Census Tract) tribal_census_tract_part (Tribal Census Tract (Part)) tribal_block_group (Tribal Block Group) state_part (State (Part)) county_subdiv_part (County Subdivision (Part)) tribal_subdiv_part (Tribal Subdivision/Remainder (Part)) aian_reserve_stat_part (American Indian Area/Alaska Native Area (Reservation Statistical Entity ) (Part)) ai_off_reserve_trust_part (American Indian Area (-Reservation Trust Land )/Hawaiian Home Land (Part)) tribal_block_group_part (Tribal Block Group (Part)) msa (Metropolitan Statistical Area/Micropolitan Statistical Area) principal_city_part (Principal City (Part)) metro_division (Metropolitan Division) msa_part (Metropolitan Statistical Area/Micropolitan Statistical Area (Part)) metro_division_part (Metropolitan Division (Part)) combined_statistical_area (Combined Statistical Area) combined_necta (Combined New England City Town Area) necta (New England City Town Area) combined_statistical_area_part (Combined Statistical Area (Part)) combined_necta_part (Combined New England City Town Area (Part)) necta_part (New England City Town Area (Part)) principal_city (Principal City) necta_division (Necta Division) necta_division_part (Necta Division (Part)) urban_area (Urban Area) urban_area_part (Urban Area (Part)) consolidated_city_part (Consolidated City (Part)) cd (Congressional District) sld_upper (State Legislative District (Upper Chamber)) sld_lower (State Legislative District (Lower Chamber)) alaska_native_regional_corporation_part (Alaska Native Regional Corporation (Part)) zcta (Zip Code Tabulation Area) zcta_part (Zip Code Tabulation Area (Part)) school_district_elementary (School District (Elementary)) school_district_secondary (School District (Secondary)) school_district_unified (School District (Unified)) congressional_district_part (Congressional District (Part)) school_district_elementary_part (School District (Elementary) (Part)) school_district_secondary_part (School District (Secondary) (Part)) school_district_unified_part (School District (Unified) (Part)) voting_district_part (Voting District (Part)) subminor_civil_division_part (Subminor Civil Division (Part)) state_legislative_district_upper_chamber_part (State Legislative District (Upper Chamber) (Part)) state_legislative_district_lower_chamber_part (State Legislative District (Lower Chamber) (Part)) vtd (Voting District) ai_tribal_subdiv (American Indian Tribal Subdivision) puma (Public Use Microdata Area)","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Geography Specification for Census Data — cens_geo","text":"","code":"cens_geo(state=\"WA\") #> $region #> [1] \"state:53\" #>  #> $regionin #> NULL #>  cens_geo(\"county\", state=\"WA\") # equivalent to `cens_geo(county=\"all\", state=\"WA\")` #> $region #> [1] \"county:*\" #>  #> $regionin #> [1] \"state:53\" #>  cens_geo(county=\"King\", state=\"Wash\") #> $region #> [1] \"county:033\" #>  #> $regionin #> [1] \"state:53\" #>  cens_geo(zcta=\"02138\", check=FALSE) #> $region #> [1] \"zip code tabulation area:02138\" #>  #> $regionin #> NULL #>  cens_geo(zcta=NA, state=\"WA\", check=FALSE) #> $region #> [1] \"zip code tabulation area:*\" #>  #> $regionin #> [1] \"state:53\" #>  cens_geo(\"zcta\", state=\"WA\", check=FALSE) #> $region #> [1] \"zip code tabulation area:*\" #>  #> $regionin #> [1] \"state:53\" #>  cens_geo(cd=\"09\", state=\"WA\", check=FALSE) #> $region #> [1] \"congressional district:09\" #>  #> $regionin #> [1] \"state:53\" #>  cens_geo(\"county_part\", state=\"WA\", cd=\"09\", check=FALSE) #> $region #> [1] \"county (or part):*\" #>  #> $regionin #> [1] \"state:53+congressional district:09\" #>"},{"path":"http://corymccartan.com/easycensus/reference/cens_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Download data from a decennial census or ACS table — cens_get_dec","title":"Download data from a decennial census or ACS table — cens_get_dec","text":"Leverages censusapi::getCensus() download tables census data. Tables returned tidy format, variables given tidy, human-readable names.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download data from a decennial census or ACS table — cens_get_dec","text":"","code":"cens_get_dec(   table,   geo = NULL,   ...,   sumfile = \"sf1\",   pop_group = NULL,   check_geo = FALSE,   drop_total = FALSE,   show_call = FALSE )  cens_get_acs(   table,   geo = NULL,   ...,   year = 2019,   survey = c(\"acs5\", \"acs1\"),   check_geo = FALSE,   drop_total = FALSE,   show_call = FALSE )  cens_get_raw(   table,   geo = NULL,   ...,   year = 2010,   api = NULL,   check_geo = FALSE,   show_call = TRUE )"},{"path":"http://corymccartan.com/easycensus/reference/cens_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download data from a decennial census or ACS table — cens_get_dec","text":"table table download, either character vector table object produced cens_find_dec(),  cens_find_acs() cens_parse_tables(), included tables_dec tables_acs. Note: tables split /B/C/etc. versions race; function unifies tables one code. , example, use P012, P012A. geo geographic level return. One machine-readable human-readable names listed \"Details\" section cens_geo(). return matching geographies level, filtered arguments ....  example, setting geo=\"tract\" equivalent setting tract=\"\". ... Geographies return, supported Census API. Order matters ---first argument geographic level return (.e., corresponds geo argument) additional arguments filter results. Use \"\", \"*\", NA, TRUE return units particular geography.  See examples cens_geo() details. sumfile decennial data, summary file use. SF2 contains detailed race household info. pop_group decennial data using summary file SF2, population group filter . See https://www2.census.gov/programs-surveys/decennial/2010/technical-documentation/complete-tech-docs/summary-file/sf2.pdf#page=347. check_geo TRUE, validate provided geographies available geographies relevant Census API. drop_total Whether filter variables totals across another variable. Recommended inspection underlying table. show_call Whether show actual call Census API. May useful debugging. year ACS data, survey year get data . survey ACS data, whether use one-year five-year survey (default). Make sure check availability using cens_find_acs(). api Census API programmatic name \"acs/acs5\".","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download data from a decennial census or ACS table — cens_get_dec","text":"tibble census data tidy format, columns GEOID, NAME, variable (containing Census variable code), value estimate case ACS tables, additional factor columns specific table.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_get.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Download data from a decennial census or ACS table — cens_get_dec","text":"cens_get_dec(): Get decennial census data. cens_get_acs(): Get American Community Survey (ACS) data. cens_get_raw(): Get raw data another Census Bureau API. Output minimally tidied likely require manipulation.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download data from a decennial census or ACS table — cens_get_dec","text":"","code":"if (FALSE) { cens_get_dec(\"P3\", \"state\") cens_get_dec(tables_sf1$H2, \"state\") cens_get_dec(\"H2\", \"county\", state=\"WA\", drop_total=TRUE)  cens_get_acs(\"B09001\", county=\"King\", state=\"WA\") }"},{"path":"http://corymccartan.com/easycensus/reference/cens_margin_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to sum over nuisance variables — cens_margin_to","title":"Helper function to sum over nuisance variables — cens_margin_to","text":"ACS data, margins error updated appropriately, using functionality estimate().","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_margin_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to sum over nuisance variables — cens_margin_to","text":"","code":"cens_margin_to(data, ...)"},{"path":"http://corymccartan.com/easycensus/reference/cens_margin_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to sum over nuisance variables — cens_margin_to","text":"data output cens_get_dec() cens_get_acs() ... variables interest, kept. Remaining variables marginalized .","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_margin_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to sum over nuisance variables — cens_margin_to","text":"new data frame group_by() summarize() applied.","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_margin_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to sum over nuisance variables — cens_margin_to","text":"","code":"if (FALSE) { d_cens = cens_get_acs(\"state\", \"B25042\") cens_margin_to(d_cens, bedrooms) }"},{"path":"http://corymccartan.com/easycensus/reference/cens_parse_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to Parse Tables from a Census API — cens_parse_tables","title":"Attempt to Parse Tables from a Census API — cens_parse_tables","text":"Uses parsing code generates tables_sf1 tables_acs See https://www.census.gov/data/developers/data-sets.html list APIs corresponding years, use censusapi::listCensusApis().","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_parse_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to Parse Tables from a Census API — cens_parse_tables","text":"","code":"cens_parse_tables(api, year)"},{"path":"http://corymccartan.com/easycensus/reference/cens_parse_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to Parse Tables from a Census API — cens_parse_tables","text":"api Census API programmatic name \"acs/acs5\". year year data","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_parse_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to Parse Tables from a Census API — cens_parse_tables","text":"list cens_table objects, just lists four elements: concept, human-readable name tables, constituent table codes surveys, supported surveys dims, parsed names dimensions tables vars, tibble parsed variable values","code":""},{"path":"http://corymccartan.com/easycensus/reference/cens_parse_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attempt to Parse Tables from a Census API — cens_parse_tables","text":"","code":"if (FALSE) { cens_parse_tables(\"dec/pl\", 2020) }"},{"path":"http://corymccartan.com/easycensus/reference/easycensus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"easycensus: Quickly Find, Extract, and Marginalize U.S. Census Tables — easycensus-package","title":"easycensus: Quickly Find, Extract, and Marginalize U.S. Census Tables — easycensus-package","text":"Extracting desired data using proper Census variable names can time-consuming. package takes pain process providing functions quickly locate variables download labeled tables Census APIs (https://www.census.gov/data/developers/data-sets.html).","code":""},{"path":[]},{"path":"http://corymccartan.com/easycensus/reference/easycensus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"easycensus: Quickly Find, Extract, and Marginalize U.S. Census Tables — easycensus-package","text":"Maintainer: Cory McCartan cmccartan@g.harvard.edu","code":""},{"path":"http://corymccartan.com/easycensus/reference/est_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract estimates, standard errors, and margins of error — get_est","title":"Extract estimates, standard errors, and margins of error — get_est","text":"Getter functions estimate() vectors. posterior::rvar class may useful handling standard errors complicated mathematical expressions. function assumes Normal distribution centered estimate, standard deviation equal standard error estimate. posterior package required function.","code":""},{"path":"http://corymccartan.com/easycensus/reference/est_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract estimates, standard errors, and margins of error — get_est","text":"","code":"get_est(x)  get_se(x)  get_moe(x, conf = 0.9)  to_rvar(x, n = 500)"},{"path":"http://corymccartan.com/easycensus/reference/est_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract estimates, standard errors, and margins of error — get_est","text":"x estimate vector. conf confidence level use constructing margin error. n many samples draw.","code":""},{"path":"http://corymccartan.com/easycensus/reference/est_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract estimates, standard errors, and margins of error — get_est","text":"estimate vector. posterior::rvar vector.","code":""},{"path":"http://corymccartan.com/easycensus/reference/est_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract estimates, standard errors, and margins of error — get_est","text":"","code":"x = estimate(1, 0.1) get_est(x) #> [1] 1 get_moe(x) #> [1] 0.1644854  x = estimate(1, 0.1) if (requireNamespace(\"posterior\", quietly=TRUE)) {     rv_x = to_rvar(x)     (rv_x^2 / rv_x) - rv_x # std. errors zero (correct)     x^2 / x - x # std. errors not zero } #> <estimate[1]> #> [1] 0 ± 0.4"},{"path":"http://corymccartan.com/easycensus/reference/est_special.html","id":null,"dir":"Reference","previous_headings":"","what":"Specialized margin-of-error calculations — est_prop","title":"Specialized margin-of-error calculations — est_prop","text":"Proportions percent-change--time calculations require different standard error calculations.","code":""},{"path":"http://corymccartan.com/easycensus/reference/est_special.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specialized margin-of-error calculations — est_prop","text":"","code":"est_prop(x, y)  est_pct_chg(x, y)"},{"path":"http://corymccartan.com/easycensus/reference/est_special.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specialized margin-of-error calculations — est_prop","text":"x, y estimate vector. est_pct_chg(), calculates % change x y (.e., \\((y-x)/x\\))","code":""},{"path":"http://corymccartan.com/easycensus/reference/est_special.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specialized margin-of-error calculations — est_prop","text":"estimate vector.","code":""},{"path":"http://corymccartan.com/easycensus/reference/est_special.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specialized margin-of-error calculations — est_prop","text":"","code":"x = estimate(1, 0.1) y = estimate(1.5, 0.1) est_prop(x, y) #> <estimate[1]> #> [1] 0.67 ± 0.12 est_pct_chg(x, y) #> <estimate[1]> #> [1] 0.5 ± 0.3"},{"path":"http://corymccartan.com/easycensus/reference/estimate-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — estimate-vctrs","title":"Internal vctrs methods — estimate-vctrs","text":"Internal vctrs methods","code":""},{"path":"http://corymccartan.com/easycensus/reference/estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate class — estimate","title":"Estimate class — estimate","text":"numeric vector stores margin--error information along . margin error update basic arithmetic operations, using first-order Taylor series approximation. implicit assumption errors value uncorrelated. fact correlation, margins error wildly - -estimated.","code":""},{"path":"http://corymccartan.com/easycensus/reference/estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate class — estimate","text":"","code":"estimate(x, se = NULL, moe = NULL, conf = 0.9)  is_estimate(x)  as_estimate(x)"},{"path":"http://corymccartan.com/easycensus/reference/estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate class — estimate","text":"x numeric vector containing estimate(s). se numeric vector containing standard error(s) estimate(s). Users supply either se moe conf. moe numeric vector containing margin(s) error. Users supply either se moe conf. conf confidence level use converting margin error standard error. Defaults 90%, Census Bureau uses ACS estimates.","code":""},{"path":"http://corymccartan.com/easycensus/reference/estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate class — estimate","text":"estimate vector.","code":""},{"path":"http://corymccartan.com/easycensus/reference/estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate class — estimate","text":"","code":"estimate(5, 2) # 5 with std. error  2 #> <estimate[1]> #> [1] 5 ± 3.3 estimate(15, moe=3) - estimate(5, moe=4) #> <estimate[1]> #> [1] 10 ± 5 estimate(1:4, 0.1) * estimate(1, 0.1) #> <estimate[4]> #> [1] 1 ± 0.23 2 ± 0.37 3 ± 0.52 4 ± 0.68"},{"path":"http://corymccartan.com/easycensus/reference/format.estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Format an estimate — format.estimate","title":"Format an estimate — format.estimate","text":"Format estimate pretty printing","code":""},{"path":"http://corymccartan.com/easycensus/reference/format.estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format an estimate — format.estimate","text":"","code":"# S3 method for estimate format(x, conf = 0.9, digits = 2, trim = FALSE, ..., formatter = fmt_plain)"},{"path":"http://corymccartan.com/easycensus/reference/format.estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format an estimate — format.estimate","text":"x estimate vector conf confidence level use converting margin error standard error. Defaults 90%, Census Bureau uses ACS estimates. digits number dig trim logical; FALSE, logical, numeric complex values right-justified common width: TRUE leading blanks justification suppressed. ... Ignored. formatter formatting function use internally","code":""},{"path":"http://corymccartan.com/easycensus/reference/tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsed Census SF1 and ACS Tables — tables","title":"Parsed Census SF1 and ACS Tables — tables","text":"Contains parsed table information 2010 Decennial Summary File 1 2019 ACS 5-year 1-year tables. parsed information used internally cens_find_dec(), cens_find_acs(), cens_get_dec(), cens_get_acs(). sets tables, try using cens_parse_tables().","code":""},{"path":"http://corymccartan.com/easycensus/reference/tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsed Census SF1 and ACS Tables — tables","text":"","code":"tables_sf1  tables_acs"},{"path":"http://corymccartan.com/easycensus/reference/tables.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parsed Census SF1 and ACS Tables — tables","text":"list cens_table objects, just lists four elements: concept, human-readable name tables, constituent table codes surveys, supported surveys dims, parsed names dimensions tables vars, tibble parsed variable values object class list length 83. object class list length 848.","code":""},{"path":"http://corymccartan.com/easycensus/reference/tidiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy labels in census tables — tidiers","title":"Tidy labels in census tables — tidiers","text":"table labels quite verbose, users often want shorten . functions make tidying common types labels easy. produce straightforward output, several generic tidiers: tidy_simplify() attempts simplify labels removing words common labels. tidy_parens() attempts simplify labels removing terms parentheses. tidy_race_detailed() creates logical columns six racial categories.","code":""},{"path":"http://corymccartan.com/easycensus/reference/tidiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy labels in census tables — tidiers","text":"","code":"tidy_race(x)  tidy_race_detailed(x, x2, x3)  tidy_ethnicity(x)  tidy_age(x)  tidy_age_bins(x, as_factor = FALSE)  tidy_income_bins(x, as_factor = FALSE)  tidy_simplify(x)  tidy_parens(x)"},{"path":"http://corymccartan.com/easycensus/reference/tidiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy labels in census tables — tidiers","text":"x factor, re-leveled. Character vectors converted factors. x2, x3 Additional character columns containing detailed information certain variables (e.g. detailed race) as_factor TRUE, return factor levels form [35,40].","code":""},{"path":"http://corymccartan.com/easycensus/reference/tidiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy labels in census tables — tidiers","text":"re-leveled factor, except tidy_age_bins(), default returns data frame columns age_from age_to (inclusive).","code":""},{"path":"http://corymccartan.com/easycensus/reference/tidiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy labels in census tables — tidiers","text":"","code":"ex_race_long = c(\"american indian and alaska native alone\", \"asian alone\",     \"black or african american alone\", \"hispanic or latino\",     \"native hawaiian and other pacific islander alone\",     \"some other race alone\", \"total\", \"two or more races\",     \"white alone\", \"white alone, not hispanic or latino\") tidy_race(ex_race_long) #>  [1] aian     asian    black    hisp     nhpi     other    total    two      #>  [9] white    white_nh #> Levels: aian asian black hisp nhpi other total two white white_nh  tidy_age_bins(c(\"10 to 14 years\", \"21 years\", \"85 years and over\")) #> # A tibble: 3 × 2 #>   age_from age_to #>      <dbl>  <dbl> #> 1       10     14 #> 2       21     21 #> 3       85    Inf  tidy_parens(c(\"label one (fake)\", \"label two (fake)\")) #> [1] label one label two #> Levels: label one label two tidy_simplify(c(\"label one (fake)\", \"label two (fake)\")) #> [1] one two #> Levels: one two  if (FALSE)  # requires API key d = cens_get_acs(\"B02003\", \"us\", year=2019, survey=\"acs1\") dplyr::mutate(d, tidy_race_detailed(dtldr_1, dtldr_2, dtldr_3)) #> Error in dplyr::mutate(d, tidy_race_detailed(dtldr_1, dtldr_2, dtldr_3)): object 'd' not found"},{"path":"http://corymccartan.com/easycensus/news/index.html","id":"easycensus-111","dir":"Changelog","previous_headings":"","what":"easycensus 1.1.1","title":"easycensus 1.1.1","text":"New cens_get_raw() allows users try download non-ACS non-2010-decennial APIs. Goes hand--hand cens_parse_tables(). Fixes CRAN issues bugs Improves consistency cens_get_acs()","code":""},{"path":"http://corymccartan.com/easycensus/news/index.html","id":"easycensus-100","dir":"Changelog","previous_headings":"","what":"easycensus 1.0.0","title":"easycensus 1.0.0","text":"CRAN release: 2022-08-25 Core functions renamed consistent cens_ prefix Use censusapi instead tidycensus fewer dependencies New estimate vector type tracks uncertainty mathematical operations Expose parsed tables users new cens_table type flexible geography options downloading data. See cens_geo() details. Improved tidiers, including new income bin detailed race tidiers","code":""},{"path":"http://corymccartan.com/easycensus/news/index.html","id":"easycensus-020","dir":"Changelog","previous_headings":"","what":"easycensus 0.2.0","title":"easycensus 0.2.0","text":"CRAN resubmission","code":""},{"path":"http://corymccartan.com/easycensus/news/index.html","id":"easycensus-020-1","dir":"Changelog","previous_headings":"","what":"easycensus 0.2.0","title":"easycensus 0.2.0","text":"Availability information 1-year 5-year ACS Improve documentation parameter organization New tests","code":""},{"path":"http://corymccartan.com/easycensus/news/index.html","id":"easycensus-010","dir":"Changelog","previous_headings":"","what":"easycensus 0.1.0","title":"easycensus 0.1.0","text":"Initial release Functionality search download ACS 2010 Census tables Helper functions recoding common variables marginalizing nuisance variables","code":""}]
